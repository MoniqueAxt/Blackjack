// <auto-generated />
using System;
using CardGame_DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardGame_DAL.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CardGame_EL.GameEvents.GameEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameEvents");

                    b.HasDiscriminator<string>("Discriminator").HasValue("GameEvent");
                });

            modelBuilder.Entity("CardGame_EL.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("DeckId")
                        .HasColumnType("int");

                    b.Property<int>("Suit")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("CardGame_EL.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Decks");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Deck");
                });

            modelBuilder.Entity("CardGame_EL.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ActivePlayerId")
                        .HasColumnType("int");

                    b.Property<int>("DealerId")
                        .HasColumnType("int");

                    b.Property<int>("GameDeckId")
                        .HasColumnType("int");

                    b.Property<string>("GameName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("GameOver")
                        .HasColumnType("bit");

                    b.Property<int>("GameSettingsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActivePlayerId");

                    b.HasIndex("DealerId");

                    b.HasIndex("GameDeckId");

                    b.HasIndex("GameSettingsId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("CardGame_EL.Models.GameSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("NumberDecks")
                        .HasColumnType("int");

                    b.Property<int>("NumberHumanPlayers")
                        .HasColumnType("int");

                    b.Property<int>("NumberPlayersToCreate")
                        .HasColumnType("int");

                    b.Property<int>("NumberRounds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GameSettings");
                });

            modelBuilder.Entity("CardGame_EL.Players.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("HandId")
                        .HasColumnType("int");

                    b.Property<bool>("IsHuman")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("HandId");

                    b.ToTable("Players");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Player");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.GameStateAction", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.GameEvent");

                    b.HasDiscriminator().HasValue("GameStateAction");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.PlayerAction", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.GameEvent");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasIndex("OwnerId");

                    b.HasDiscriminator().HasValue("PlayerAction");
                });

            modelBuilder.Entity("CardGame_EL.Models.Hand", b =>
                {
                    b.HasBaseType("CardGame_EL.Models.Deck");

                    b.HasDiscriminator().HasValue("Hand");
                });

            modelBuilder.Entity("CardGame_EL.Players.BlackJackPlayer", b =>
                {
                    b.HasBaseType("CardGame_EL.Players.Player");

                    b.Property<int>("Money")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("BlackJackPlayer");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.DiscardCardEvent", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.PlayerAction");

                    b.Property<int>("DiscardedCardId")
                        .HasColumnType("int");

                    b.Property<int>("HandId")
                        .HasColumnType("int");

                    b.HasIndex("DiscardedCardId");

                    b.HasIndex("HandId");

                    b.HasDiscriminator().HasValue("DiscardCardEvent");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.DrawCardEvent", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.PlayerAction");

                    b.Property<int>("DrawnCardId")
                        .HasColumnType("int");

                    b.Property<int>("FromDeckId")
                        .HasColumnType("int");

                    b.Property<int>("ToHandId")
                        .HasColumnType("int");

                    b.HasIndex("DrawnCardId");

                    b.HasIndex("FromDeckId");

                    b.HasIndex("ToHandId");

                    b.HasDiscriminator().HasValue("DrawCardEvent");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.GameOverEvent", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.GameStateAction");

                    b.HasDiscriminator().HasValue("GameOverEvent");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.NoAction", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.PlayerAction");

                    b.HasDiscriminator().HasValue("NoAction");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.ReceiveCardEvent", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.PlayerAction");

                    b.Property<int>("DealtCardId")
                        .HasColumnType("int");

                    b.Property<int>("FromDeckId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiveCardEvent_FromDeckId");

                    b.Property<int>("ToHandId")
                        .HasColumnType("int")
                        .HasColumnName("ReceiveCardEvent_ToHandId");

                    b.HasIndex("DealtCardId");

                    b.HasIndex("FromDeckId");

                    b.HasIndex("ToHandId");

                    b.HasDiscriminator().HasValue("ReceiveCardEvent");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.UserInputRequired", b =>
                {
                    b.HasBaseType("CardGame_EL.GameEvents.PlayerAction");

                    b.HasDiscriminator().HasValue("UserInputRequired");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.GameEvent", b =>
                {
                    b.HasOne("CardGame_EL.Models.Game", null)
                        .WithMany("ProcessGameEvents")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("CardGame_EL.Models.Card", b =>
                {
                    b.HasOne("CardGame_EL.Models.Deck", null)
                        .WithMany("Cards")
                        .HasForeignKey("DeckId");
                });

            modelBuilder.Entity("CardGame_EL.Models.Game", b =>
                {
                    b.HasOne("CardGame_EL.Players.Player", "ActivePlayer")
                        .WithMany()
                        .HasForeignKey("ActivePlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Players.Player", "Dealer")
                        .WithMany()
                        .HasForeignKey("DealerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "GameDeck")
                        .WithMany()
                        .HasForeignKey("GameDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.GameSettings", "GameSettings")
                        .WithMany()
                        .HasForeignKey("GameSettingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivePlayer");

                    b.Navigation("Dealer");

                    b.Navigation("GameDeck");

                    b.Navigation("GameSettings");
                });

            modelBuilder.Entity("CardGame_EL.Players.Player", b =>
                {
                    b.HasOne("CardGame_EL.Models.Game", null)
                        .WithMany("Players")
                        .HasForeignKey("GameId");

                    b.HasOne("CardGame_EL.Models.Hand", "Hand")
                        .WithMany()
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.PlayerAction", b =>
                {
                    b.HasOne("CardGame_EL.Players.Player", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.DiscardCardEvent", b =>
                {
                    b.HasOne("CardGame_EL.Models.Card", "DiscardedCard")
                        .WithMany()
                        .HasForeignKey("DiscardedCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "Hand")
                        .WithMany()
                        .HasForeignKey("HandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiscardedCard");

                    b.Navigation("Hand");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.DrawCardEvent", b =>
                {
                    b.HasOne("CardGame_EL.Models.Card", "DrawnCard")
                        .WithMany()
                        .HasForeignKey("DrawnCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "FromDeck")
                        .WithMany()
                        .HasForeignKey("FromDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "ToHand")
                        .WithMany()
                        .HasForeignKey("ToHandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawnCard");

                    b.Navigation("FromDeck");

                    b.Navigation("ToHand");
                });

            modelBuilder.Entity("CardGame_EL.GameEvents.ReceiveCardEvent", b =>
                {
                    b.HasOne("CardGame_EL.Models.Card", "DealtCard")
                        .WithMany()
                        .HasForeignKey("DealtCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "FromDeck")
                        .WithMany()
                        .HasForeignKey("FromDeckId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardGame_EL.Models.Deck", "ToHand")
                        .WithMany()
                        .HasForeignKey("ToHandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DealtCard");

                    b.Navigation("FromDeck");

                    b.Navigation("ToHand");
                });

            modelBuilder.Entity("CardGame_EL.Models.Deck", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardGame_EL.Models.Game", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("ProcessGameEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
